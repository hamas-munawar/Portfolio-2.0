/**
 * Script to automatically generate TypeScript type definitions for icon names
 * based on SVG files in the public/assets/Icons directory
 */

const fs = require("fs");
const path = require("path");

// Path to the icons directory
const ICONS_DIR = path.join(__dirname, "..", "public", "icons");
// Path to the output TypeScript file
const OUTPUT_FILE = path.join(__dirname, "..", "app", "types", "icons.ts");

// Ensure the types directory exists
const typesDir = path.dirname(OUTPUT_FILE);
if (!fs.existsSync(typesDir)) {
  fs.mkdirSync(typesDir, { recursive: true });
}

// Generate the TypeScript type definition
function generateIconTypes() {
  try {
    // Read all SVG files from the icons directory
    const files = fs.readdirSync(ICONS_DIR);
    const iconNames = files
      .filter((file) => file.endsWith(".svg"))
      .map((file) => `'${path.basename(file, ".svg")}'`);

    // Sort icon names alphabetically
    iconNames.sort();

    // Create the TypeScript type definition content
    const content = `/**
 * AUTOMATICALLY GENERATED FILE - DO NOT EDIT
 * Generated by scripts/generate-icon-types.js
 *
 * Type definition for icon names based on SVG files in public/assets/Icons directory
 */
export type IconName =
  | ${iconNames.join("\n  | ")};
`;

    // Write the content to the output file
    fs.writeFileSync(OUTPUT_FILE, content);
    console.log(`âœ… Icon types generated at ${OUTPUT_FILE}`);
  } catch (error) {
    console.error("Error generating icon types:", error);
    process.exit(1);
  }
}

// Run the generator
generateIconTypes();
